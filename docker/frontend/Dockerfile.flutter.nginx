# # Environemnt to install flutter and build web
# FROM ubuntu:latest AS build-env

# # Install required dependencies for Flutter
# RUN apt update && apt install -y \
#     curl \
#     git \
#     wget \
#     unzip \
#     libgconf-2-4 \
#     gdb \
#     libstdc++6 \
#     libglu1-mesa \
#     fonts-droid-fallback \
#     lib32stdc++6 \
#     python3 \
#     && apt clean

# # Define variables
# ARG FLUTTER_SDK=/usr/local/flutter
# ARG FLUTTER_VERSION=3.13.9

# # Download and install Flutter SDK
# RUN git clone https://github.com/flutter/flutter.git $FLUTTER_SDK
# RUN cd $FLUTTER_SDK && git fetch && git checkout $FLUTTER_VERSION

# # Add Flutter SDK to enviroment path
# ENV PATH="$FLUTTER_SDK/bin:$FLUTTER_SDK/bin/cache/dart-sdk/bin:${PATH}"

# # Upgrade Flutter
# # Flutter doctor to see if installation is fine
# # Enable Flutter web config
# RUN flutter upgrade && flutter doctor -v && flutter config --enable-web

# # Copy frontend directory's content
# RUN mkdir /app
# COPY frontend /app/frontend
# WORKDIR /app/frontend

# # Get packages and build web app
# RUN flutter clean && flutter pub get &&flutter build web

# Use nginx to deploy
FROM nginx:1.25.2-alpine as runtime-env

# Copy builded web app to nginx
# COPY --from=build-env /app/frontend/build/web /usr/share/nginx/html/web
COPY frontend/build/web /usr/share/nginx/html/web
COPY docker/frontend/nginx/default.conf /etc/nginx/conf.d/default.conf

# Expose and run nginx
EXPOSE 80

# ###

# # Enable flutter web
# RUN flutter channel master
# RUN flutter upgrade
# RUN flutter config --enable-web

# # Set the working directory within the container
# COPY frontend /app/frontend
# WORKDIR /app/frontend
# RUN flutter pub get
# RUN flutter build web

# # Expose the necessary ports (adjust as needed)
# EXPOSE 8080

# # make server startup script executable and start the web server
# # RUN ["chmod", "+x", "/app/frontend/server/server.sh"]
# # ENTRYPOINT ["/app/frontend/server/server.sh"]