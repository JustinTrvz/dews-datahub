from datetime import datetime
import uuid
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy import Uuid

from backend import db


class DbSatelliteData(db.Model):
    __tablename__ = "satellite_data"

    # Attributes
    ## General Info
    id = db.Column(db.Uuid, primary_key=True, default=uuid.uuid4)
    mission = db.Column(db.String(50))
    type = db.Column(db.String(50))
    ## Specific info
    name = db.Column(db.String(50))
    country = db.Column(db.String(50))
    city = db.Column(db.String(50))
    postal_code = db.Column(db.Integer)
    creation_time=db.Column(db.DateTime, default=datetime.utcnow)
    capture_time=db.Column(db.DateTime)
    ## Paths
    directory_path=db.Column(db.String(255))
    thumbnail_path=db.Column(db.String(255))
    rgb_path=db.Column(db.String(255))
    ndvi_path=db.Column(db.String(255))
    moisture_path=db.Column(db.String(255))

    # Foreign keys
    user_id = db.Column(db.String, db.ForeignKey("users.id"),
                        nullable=False)

    # Back references
    user = db.relationship("DbUser",
                           back_populates="sd_entries")
    calculations = db.relationship("DbCalculation",
                                   back_populates="sd_entry")


user_group_association = db.Table("user_group_association",
                                  db.Column("user_id", db.String,
                                            db.ForeignKey("users.id")),
                                  db.Column("group_id", db.String,
                                            db.ForeignKey("user_groups.id"))
                                  )


class DbUser(db.Model):
    __tablename__ = "users"

    # Attributes
    id = db.Column(db.String(50), primary_key=True)
    first_name = db.Column(db.String(50), nullable=False)
    last_name = db.Column(db.String(50), nullable=False)
    mail = db.Column(db.String(50), nullable=False, unique=True)
    address = db.Column(db.String(50))
    city = db.Column(db.String(50))
    postal_code = db.Column(db.Integer)
    country = db.Column(db.String(50))
    created = db.Column(db.Date, default=datetime.utcnow)
    last_modified = db.Column(db.Date, default=datetime.utcnow)

    # Back references
    groups = db.relationship("DbUserGroup",
                             secondary=user_group_association,
                             back_populates="users")
    sd_entries = db.relationship("DbSatelliteData",
                                 back_populates="user")
    calculations = db.relationship("DbCalculation",
                                   back_populates="user")


class DbUserGroup(db.Model):
    __tablename__ = "user_groups"

    # Attributes
    id = db.Column(db.String(50), primary_key=True)

    # Back references
    users = db.relationship("DbUser",
                            secondary=user_group_association,
                            back_populates="groups")


class DbCalculation(db.Model):
    __tablename__ = "calculations"

    # Attributes
    id = db.Column(db.Uuid, primary_key=True, default=uuid.uuid4)
    result = db.Column(db.String(50))

    # Foreign keys
    user_id = db.Column(db.String(50), db.ForeignKey("users.id"))
    sd_id = db.Column(db.Uuid, db.ForeignKey("satellite_data.id"))

    # Back references
    user = db.relationship("DbUser",
                           back_populates="calculations")
    sd_entry = db.relationship("DbSatelliteData",
                               back_populates="calculations")
    
# CREATE TABLE basic_information (
#     id INTEGER PRIMARY KEY,
#     user_id INTEGER,
#     satellite_mission VARCHAR(255),
#     area_name VARCHAR(255),
#     country VARCHAR(255),
#     city VARCHAR(255),
#     postal_code VARCHAR(20),
#     creation_time DATETIME,
#     capture_time DATETIME
# );

# CREATE TABLE image_information (
#     id INTEGER PRIMARY KEY,
#     satellite_data_id INTEGER,
#     img_type VARCHAR(20),
#     img_path VARCHAR(255),
#     PRIMARY KEY (id, satellite_data_id),
#     FOREIGN KEY (satellite_data_id) REFERENCES basic_information(id)
# );

# CREATE TABLE bound_latitudes (
#     id INTEGER PRIMARY KEY,
#     satellite_data_id INTEGER,
#     north DOUBLE,
#     east DOUBLE,
#     south DOUBLE,
#     west DOUBLE,
#     PRIMARY KEY (id, satellite_data_id),
#     FOREIGN KEY (satellite_data_id) REFERENCES basic_information(id)
# );

# CREATE TABLE file_paths (
#     id INTEGER PRIMARY KEY,
#     satellite_data_id INTEGER,
#     directory_path VARCHAR(255),
#     manifest_path VARCHAR(255),
#     PRIMARY KEY (id, satellite_data_id),
#     FOREIGN KEY (satellite_data_id) REFERENCES basic_information(id)
# );

# CREATE TABLE capture_information (
#     id INTEGER PRIMARY KEY,
#     satellite_data_id INTEGER,
#     product_start_time DATETIME,
#     product_stop_time DATETIME,
#     product_type VARCHAR(50),
#     PRIMARY KEY (id, satellite_data_id),
#     FOREIGN KEY (satellite_data_id) REFERENCES basic_information(id)
# );